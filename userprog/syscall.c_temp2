#include "userprog/syscall.h"
#include <stdio.h>
#include <syscall-nr.h>
#include "threads/interrupt.h"
#include "threads/thread.h"
#include "threads/vaddr.h"
#include "threads/synch.h"
#include "userprog/process.h"
#include "filesys/filesys.h"
#include "filesys/file.h"

static void syscall_handler (struct intr_frame *);

static int get_user (const uint8_t *);
static bool put_user (uint8_t *, uint8_t);

static void exit(int);

void
syscall_init (void) 
{
  intr_register_int (0x30, 3, INTR_ON, syscall_handler, "syscall");
}

static void
syscall_handler (struct intr_frame *f UNUSED) 
{
  int syscall_number;

  syscall_number =  get_user(f->esp);
  if(syscall_number == -1)
    exit(-1);
  switch(syscall_number)
  {
    case(SYS_HALT):
      {
        power_off();
        break;
      }
    case(SYS_EXIT):
      {
        int status = get_user(f->esp+4);
        exit( status );
      }
    case(SYS_EXEC):
      {
        const char *file_name = get_user(f->esp+4);
        
        /* Check file_name validity */
        if(file_name==NULL || file_name==-1 || get_user(file_name)==-1)
          exit(-1);
        
        sema_up(&filesys_sema);
        f->eax = process_execute(file_name);
        break;
      }
    case(SYS_WAIT):
      {
        int pid = get_user(f->esp+4);
        
        /* Invalid user addr */
        if(pid==-1)
          exit(-1);

        sema_up(&filesys_sema);
        f->eax = process_wait(pid);
        break;
      }
    case(SYS_CREATE):
      {
        const char *name = get_user(f->esp+4);
        unsigned initial_size = get_user(f->esp+8);
        
        /* Invalid user addr */
        if(name==-1 || initial_size==-1)
          exit(-1);

        /* Check name validity */
        if(name==NULL || get_user(name)==-1)
          exit(-1);
        
        f->eax = filesys_create(name, initial_size);
        sema_up(&filesys_sema);
        break;
      }
    case(SYS_REMOVE):
      {
        const char *name = get_user(f->esp+4);
        /* Check name validity */
        if(name == -1 || name == NULL || get_user(name)==-1)
          exit(-1);
        f->eax = filesys_remove(name);
        sema_up(&filesys_sema);
        break;
      }
    case(SYS_OPEN):
      {
        int i;
        struct file **fd_table;
        const char *name = get_user(f->esp+4);
        struct file *file;

        /* Check name validity */
        if(name == -1 || name == NULL || get_user(name)==-1)
          exit(-1);
        
        file = filesys_open(name);
        sema_up(&filesys_sema);
        
        /* File open failed */
        if(!file)
          {
            f->eax = -1;
            break;
          }
          
        /* Assign fd to file */
        fd_table = thread_current()->fd_table;
        for(i=2;i<100;i++)
        {
          if(!fd_table[i])
            break;
        }

        /* No more fd available */
        if(i==100)
        {
          f->eax = -1;
          sema_down(&filesys_sema);
          file_close(file);
          sema_up(&filesys_sema);
        }
        else
        {
          fd_table[i] = file;
          f->eax = i;
        }
        break;
      }
    case(SYS_FILESIZE):
      {
        int fd = get_user(f->esp+4);
        struct file **fd_table = thread_current()->fd_table;
        if(fd==-1)
          exit(-1);
        
        if(fd_table[fd]==NULL)
          exit(-1);

        f->eax = file_length(fd_table[fd]);
        sema_up(&filesys_sema);
        break;
      }
    case(SYS_READ):
      {
        int fd = get_user(f->esp+4);
        uint8_t *buffer = get_user(f->esp+8);
        unsigned size = get_user(f->esp+12);
        struct file **fd_table = thread_current()->fd_table;

        /* Check addr and buffer validity */
        if(fd==-1 || buffer==-1 || size ==-1 || get_user(buffer)==-1)
          exit(-1);
        
        /* If fd is 0, read from kbd */
        if(fd==0)
        {
          int i;
          uint8_t c;
          for(i=0;i<size;i++)
          {
            c = input_getc();
            if(!put_user(buffer++, c))
              exit(-1); 
          }
          f->esp = size;
          sema_up(&filesys_sema);
          break;
        }

        /* Invalid fd */
        if(fd<2 || fd>=100)
          exit(-1);

        if(fd_table[fd]==NULL)
          {
            f->eax = -1;
            sema_up(&filesys_sema);
            break;
          }
        
        f->eax = file_read(fd_table[fd], buffer, size);
        sema_up(&filesys_sema);
        break;
      }
    case(SYS_WRITE):
      {
        int fd = get_user(f->esp+4);
        const void *buffer = get_user(f->esp+8);
        unsigned size = get_user(f->esp+12);
        struct file **fd_table = thread_current()->fd_table;

        /* Check addr and buffer validity */
        if(fd==-1 || buffer==-1 || size==-1 || get_user(buffer)==-1)
          exit(-1);

        if(fd==1)
        {
          putbuf(buffer, size);
          f->eax = size;
          sema_up(&filesys_sema);
          break;
        }

        /* Invalid fd */
        if(fd<2 || fd>=100)
          exit(-1);

        if(fd_table[fd]==NULL)
        {
          f->eax = -1;
          sema_up(&filesys_sema);
          break;
        }

        f->eax = file_write(fd_table[fd], buffer, size);
        sema_up(&filesys_sema);
        break;
      }
    case(SYS_SEEK):
      {
        int fd = get_user(f->esp+4);
        unsigned position = get_user(f->esp+8);
        struct file **fd_table;

        /* Invalid addr */
        if(fd==-1 || position==-1)
          exit(-1);
        
        /* Invalid fd */
        if(fd<2 || fd>=100)
          exit(-1);

        fd_table = thread_current()->fd_table;
        
        /* Wrong fd */
        if(fd_table[fd]==NULL)
          exit(-1);

        file_seek(fd_table[fd], position);
        sema_up(&filesys_sema);
        break;
      }
    case(SYS_TELL):
      {
        int fd = get_user(f->esp+4);
        struct file **fd_table;

        /* Invalid addr or fd */
        if(fd==-1 || fd<2 || fd>=100)
          exit(-1);

        fd_table = thread_current()->fd_table;

        /* Wrong fd */
        if(fd_table[fd]==NULL)
          exit(-1);

        f->eax = file_tell(fd_table[fd]);
        sema_up(&filesys_sema);
        break;
      }
    case(SYS_CLOSE):
      {
        int fd = get_user(f->esp+4);
        struct file **fd_table;

        /* Invalid addr or fd */
        if(fd==-1 || fd<2 || fd>=100)
          exit(-1);

        fd_table = thread_current()->fd_table;
        
        /* open file for fd doesn't exist */
        if(!fd_table[fd])
          exit(-1);

        /* close file */
        file_close(fd_table[fd]);
        fd_table[fd] = NULL;
        sema_up(&filesys_sema);
      }
  }
}

static void
exit(int status)
{
  thread_current()->exit_status = status;
  sema_up(&filesys_sema);
  thread_exit();
}

/* VERY IMPORTANT: syscall arg cannot be -1 (except for exit */

/* Reads integer(should not be -1!!!) at user virtual address UADDR.
   UADDR must be below PHYS_BASE.
   Returns the integer value if successful, -1 if a segfault
   occurred or uaddr is above PHYS_BASE. */
static int
get_user (const uint8_t *uaddr)
{
  int result;
  if(uaddr>=PHYS_BASE)
    return -1;
  asm ("movl $1f, %0; movl %1, %0; 1:"
       : "=&a" (result) : "m" (*uaddr));
  return result;
}
/* Writes BYTE to user address UDST.
   UDST must be below PHYS_BASE.
   Returns true if successful, false if a segfault occurred.
   or udst is above PHYS_BASE. */
static bool
put_user (uint8_t *udst, uint8_t byte)
{
  int error_code;
  if(udst>=PHYS_BASE)
    return false;

  asm ("movl $1f, %0; movb %b2, %1; 1:"
       : "=&a" (error_code), "=m" (*udst) : "r" (byte));
  return error_code != -1;
}
